<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezen.royal.manager.mapper.EventManageMapper">

	<!-- SELECT -->
	<!-- 모든 이벤트 목록 -->
	<select id="getEventList" resultType="com.ezen.royal.manager.dto.EventManageDTO">
		SELECT * FROM event_list ORDER BY start_date
	</select>
	
	<!-- 이벤트 상세내용 -->
	<select id="getEventDetail" resultType="com.ezen.royal.manager.dto.EventManageDTO">
		SELECT * FROM event_list WHERE event_id=#{event_id}
	</select>
	
	<!-- 이벤트 회차 목록 -->
	<select id="getEventRoundList" resultType="com.ezen.royal.manager.dto.EventRoundManageDTO">
		SELECT * FROM event_round WHERE event_id=#{event_id}
	</select>
	
	<!-- 30일 내에 시작되는 행사 목록 -->
	<!-- <select id="getEventListBegin30Days">
		SELECT * FROM event_list WHERE start_date BETWEEN sysdate AND sysdate + 30
	</select> -->
	
	<!-- 테스트용 -->
	<select id="getEventListBegin30Days">
		SELECT * FROM event_list WHERE start_date BETWEEN to_date('23/10/01', 'YY/MM/DD') AND to_date('23/10/01', 'YY/MM/DD') + 30
	</select>
		
	
	<!-- INSERT -->
	<!-- 이벤트 추가 -->
	<insert id="insertEvent">
		INSERT INTO event_list(
			event_id, 
			royal_id, 
			event_type, 
			event_name, 
			event_location, 
			event_rounds,
			start_date, 
			end_date, 
			event_link, 
			event_imgpath, 
			reservable
		)VALUES(
			eventlist_id_seq.nextval, 
			#{royal_id}, 
			#{event_type}, 
			#{event_name}, 
			#{event_location},
			#{event_rounds},
			#{start_date},
			#{end_date},
			#{event_link},
			#{event_imgpath},
			#{reservable}
		)
	</insert>
	
	<!-- 이벤트 회차 리스트 전체 추가 -->
	<insert id="insertEventRounds" parameterType="java.util.List">
		INSERT INTO event_round(
			round_id,
			event_id,
			round_num,
			round_time,
			round_capacity
		) SELECT event_round_id_seq.nextval, A.* FROM(
		<foreach item="item" collection="list" separator="UNION ALL">
			SELECT
				(SELECT max(event_id) FROM event_list) as event_id,
				#{item.round_num} as round_num,
				#{item.round_time} as round_time,
				#{item.round_capacity} as round_capaticy
			FROM dual
		</foreach>
		) A
	</insert>
	
	<!-- 이벤트 회차 리스트 전체 추가 (업데이트 용) -->
	<insert id="insertEventRoundsToUpdate" parameterType="java.util.List">
		INSERT INTO event_round(
			round_id,
			event_id,
			round_num,
			round_time,
			round_capacity
		) SELECT event_round_id_seq.nextval, A.* FROM(
		<foreach item="item" collection="list" separator="UNION ALL">
			SELECT
				#{item.event_id} as event_id,
				#{item.round_num} as round_num,
				#{item.round_time} as round_time,
				#{item.round_capacity} as round_capaticy
			FROM dual
		</foreach>
		) A
	</insert>
	
	
	<!-- UPDATE -->
	<!-- 이벤트 수정 -->
	<update id="updateEvent">
		UPDATE event_list SET 
			event_type=#{event_type},
			event_name=#{event_name},
			event_location=#{event_location},
			event_rounds=#{event_rounds},
			start_date=#{start_date},
			end_date=#{end_date},
			event_link=#{event_link},
			event_imgpath=#{event_imgpath},
			reservable=#{reservable}
		WHERE 
			event_id=#{event_id}
	</update>
	
	<!-- 이벤트 회차 수정 (단일로 받았을 때) -->
	<!-- <update id="updateEventRound">
		UPDATE event_round SET
			event_id=#{event_id},
			round_num=#{round_num},
			round_time=#{round_time},
			round_capacity=#{round_capacity}
		WHERE
			round_id=#{modify_id}
	</update> -->
	
	
	<!-- DELETE -->
	<!-- 이벤트 삭제 -->
	<delete id="deleteEvent">
		DELETE FROM event_list WHERE event_id=#{delete_id}
	</delete>
	<!-- 이벤트 회차 전부 삭제 -->
	<delete id="deleteEventRound">
		DELETE FROM event_round WHERE event_id=#{delete_id}
	</delete>
	<!-- 이벤트 회차 하나 삭제(마지막 회차) -->
	<!-- <delete id="deleteEventRoundToMaxRoundNum">
		DELETE FROM event_round WHERE event_id=#{delete_id} AND round_num=(SELECT MAX(round_num) FROM event_round)
	</delete> -->
	
	
	
</mapper>